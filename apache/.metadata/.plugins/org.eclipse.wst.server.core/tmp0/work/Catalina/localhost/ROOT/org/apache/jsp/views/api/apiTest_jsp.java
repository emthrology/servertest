/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.40
 * Generated at: 2019-05-20 00:05:56 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.api;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class apiTest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>Insert title here</title>\n");
      out.write("\t<script type=\"text/javascript\" src=\"https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=wsxy6r6myr&submodules=geocoder\"></script> <!-- 네이버 api 추가 -->\n");
      out.write("\t<script type=\"text/javascript\" src=\"https://cdn.iamport.kr/js/iamport.payment-1.1.5.js\"></script> <!-- 아임포트 api 추가 -->\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\t");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "/WEB-INF/views/common/header.jsp", out, false);
      out.write("\n");
      out.write("\t<section>\n");
      out.write("\t\t<div class=\"container\" style=\"color:black;\">\n");
      out.write("\t\t\t<h1>1. 네이버 지도 API</h1>\n");
      out.write("\t\t\t<div id=\"map\" style=\"width:100%; height:500px;\"></div>\n");
      out.write("\t\t\t<h1>2. 결재모듈 API(아임포트)</h1>\n");
      out.write("\t\t\t<div id=\"pay\">\n");
      out.write("\t\t\t\t<h4>\n");
      out.write("\t\t\t\t\t<label><input type=\"checkbox\" value=\"1000\">1000원</label>\n");
      out.write("\t\t\t\t\t<label><input type=\"checkbox\" value=\"5000\">5000원</label>\n");
      out.write("\t\t\t\t\t<label><input type=\"checkbox\" value=\"10000\">10000원</label>\n");
      out.write("\t\t\t\t\t<label><input type=\"checkbox\" value=\"50000\">50000원</label>\n");
      out.write("\t\t\t\t</h4>\n");
      out.write("\t\t\t\t<h3>총 결재금액<span style=\"display:inline-block; width:150px; text-align:right\"></span>원</h3>\n");
      out.write("\t\t\t\t<button class=\"btn btn-primary btn-sm\">결재하기</button>\n");
      out.write("\t\t\t\t<p id=\"paymentResult\"></p>\n");
      out.write("\t\t\t</div>\n");
      out.write("\t\t</div>\n");
      out.write("\t</section>\n");
      out.write("\t<script>\n");
      out.write("\t\t$(function(){\n");
      out.write("\t\t\tvar totalPay = 0;\n");
      out.write("\t\t\t$(\"#pay input\").change(function(){\n");
      out.write("\t\t\t\tif($(this).is(':checked')) {\n");
      out.write("\t\t\t\t\ttotalPay += (Number)($(this).val());\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\ttotalPay -= (Number)($(this).val());\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t$(\"#pay span\").html(totalPay).css('color','blue');\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\t\n");
      out.write("\t\t\t$(\"#pay button\").click(function(){\n");
      out.write("\t\t\t\tvar price = $(\"#pay span\").html();\n");
      out.write("\t\t\t\tvar d = new Date();\n");
      out.write("\t\t\t\tvar date = d.getFullYear()+''+(d.getMonth()+1)+''+d.getDate()+''+d.getHours()+''+d.getMinutes()+''+d.getSeconds();\n");
      out.write("\t\t\t\tIMP.init('imp25889583');\n");
      out.write("\t\t\t\tIMP.request_pay({\n");
      out.write("\t\t\t\t\tmerchant_uid : \"상품명_\"+date,\t\t\t//거래ID - 유니크 주려고 날짜까지 넣음\n");
      out.write("\t\t\t\t\tname : \"결재리스트\",\t\t\t\t\t//결재명\n");
      out.write("\t\t\t\t\tamount : price,\t\t\t\t\t\t\t//결재 금액\n");
      out.write("\t\t\t\t\tbuyer_email :  '111101111@naver.com',\t//구매자 email\n");
      out.write("\t\t\t\t\tbuyer_name : '김동민',\n");
      out.write("\t\t\t\t\tbuyer_tel : '010-3159-5618',\n");
      out.write("\t\t\t\t\tbuyer_addr : '서울',\n");
      out.write("\t\t\t\t\tbuyer_postcode : '123-321'\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t\t},function(response){\n");
      out.write("\t\t\t\t\tif(response.success){\n");
      out.write("\t\t\t\t\t\tvar msg = \"결재가 완료되었습니다.\";\n");
      out.write("\t\t\t\t\t\tvar info1 = \"고유 ID : \"+response.imp_uid;\n");
      out.write("\t\t\t\t\t\tvar info2 = \"결재 금액 : \"+response.paid_amount;\n");
      out.write("\t\t\t\t\t\tvar info3 = \"카드 승인 번호 : \"+response.apply_num;\n");
      out.write("\t\t\t\t\t\t$(\"#paymentResult\").html(msg+\"<br>\"+info1+\"<br>\"+info2+\"<br>\"+info3);\n");
      out.write("\t\t\t\t\t} else {\n");
      out.write("\t\t\t\t\t\t$(\"#patmentResult\").html('에러 내용 : '+response.error_mgs+date);\n");
      out.write("\t\t\t\t\t}\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t});\n");
      out.write("\t\t});\n");
      out.write("\t\n");
      out.write("\t\twindow.onload = function() {\n");
      out.write("\t\t\t/* var map = new naver.maps.Map('map');  */\n");
      out.write("\t\t\tvar map = new naver.maps.Map('map',{\n");
      out.write("\t\t\t\tcenter : new naver.maps.LatLng(37.533807,126.896772),\n");
      out.write("\t\t\t\tzoom : 11,\n");
      out.write("\t\t\t\tzoomControl :true,\n");
      out.write("\t\t\t\tzoomControlOptions:{\n");
      out.write("\t\t\t\t\tposition : naver.maps.Position.TOP_RIGHT,\n");
      out.write("\t\t\t\t\tstyle : naver.maps.ZoomControlStyle.SMALL\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\tvar marker = new naver.maps.Marker({\n");
      out.write("\t\t\t\tposition : new naver.maps.LatLng(37.533807,126.896772),\n");
      out.write("\t\t\t\tmap : map\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\tnaver.maps.Event.addListener(map,'click',function(e){\n");
      out.write("\t\t\t\tmarker.setPosition(e.coord);\n");
      out.write("\t\t\t\tif(infoWindow.getMap()) {\n");
      out.write("\t\t\t\t\tinfoWindow.close();\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t//위도, 경도는 바로 구할 수 있음\n");
      out.write("\t\t\t\t//위도, 경도를 바탕으로 주소를 갖고오기 - using geocode - 위(import script)에 submodule을 추가해야함\n");
      out.write("\t\t\t\tnaver.maps.Service.reverseGeocode({ //cf) geocode : 주소를 위.경도로 바꾸기\n");
      out.write("\t\t\t\t\tlocation : new naver.maps.LatLng(e.coord.lat(),e.coord.lng())\n");
      out.write("\t\t\t\t\t}, function(status,response) {\n");
      out.write("\t\t\t\t\t\tif(status !== naver.maps.Service.Status.OK) {/* !== : 자료형까지 비교하는 JS 연산자 */\n");
      out.write("\t\t\t\t\t\t\treturn alert('주소정보 없음');\n");
      out.write("\t\t\t\t\t\t}\n");
      out.write("\t\t\t\t\t\tvar result = response.result;\n");
      out.write("\t\t\t\t\t\titems = result.items; /* 도로명주소, 지번주소의 배열형태로 전달받음 */\n");
      out.write("\t\t\t\t\t\taddress = items[1].address;\n");
      out.write("\t\t\t\t\t\tcontentString = [\n");
      out.write("\t\t\t\t\t\t\t'<div class=\"iw_inner\">',\n");
      out.write("\t\t\t\t\t\t\t'<p>'+address+'</p>',\n");
      out.write("\t\t\t\t\t\t\t'</div>'\n");
      out.write("\t\t\t\t\t\t].join('');\n");
      out.write("\t\t\t\t});\n");
      out.write("\t\t\t});\n");
      out.write("\t\t\tvar contentString = [\n");
      out.write("\t\t\t\t'<div class=\"iw_inner>\"',\n");
      out.write("\t\t\t\t'<p>서울시 영등포구 선유동2로 57 이레빌딩</p>',\n");
      out.write("\t\t\t\t'</div>'\n");
      out.write("\t\t\t].join('');\n");
      out.write("\t\t\tvar infoWindow = new naver.maps.InfoWindow();\n");
      out.write("\t\t\tnaver.maps.Event.addListener(marker, 'click', function(e){\n");
      out.write("\t\t\t\tif(infoWindow.getMap()) {\n");
      out.write("\t\t\t\t\tinfoWindow.close();\n");
      out.write("\t\t\t\t} else {\n");
      out.write("\t\t\t\t\tinfoWindow.setContent(contentString);\n");
      out.write("\t\t\t\t\tinfoWindow.open(map, marker);\n");
      out.write("\t\t\t\t}\n");
      out.write("\t\t\t\t\t\n");
      out.write("\t\t\t});\n");
      out.write("\t\t}\n");
      out.write("\t</script>\n");
      out.write("</body>\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
